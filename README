SysyphOS
========

Last updated 2018-10-21.

This toy project aims to build a self-reliant operating system on it's
own programming language with it's own compiler running in that
operating system.

Table of contents

- 1. Implementation steps
 - 1.1 Requirements
 - 1.2 Bootstraping
 - 1.3 Kernel
 - 1.4 Shell
 - 1.5 Editor
- 2. The Kore Programming Language
 - 2.1 Data Types
 - 2.2 Comparison operators
 - 2.3 Assign
 - 2.4 Arithmetic operators
 - 2.5 Flow control
 - 2.6 Declarations
 - 2.7 Example
- 3. Kore interpreter, korerun.py
- 4. Kore compiler
- 5. SysyphOS kernel
- 6. SysyphOS shell
- 7. SysyphOS editor (seed)
- 8. References

1. IMPLEMENTATION STEPS

1.1 REQUIREMENTS

The requirements are simple to describe:

- The operating system must compile itself and be self-modificable
  The edit-compile-test cycle must be self-hosted. No cross compilers,
  no existing languages (i.e. C)
- The programing language must be just enough to express the operating
  system and compiler for itself on it.
- The compiler for the language will be written in the language itself.

1.2 BOOTSTRAPING

Bootstraping process:

- Kore interpreter written in python
- Kore compiler written in Kore
- Compile Kore running the Kore interpreter over the
  Kore compiler code

1.3 KERNEL

Write the SysyphOS kernel in Kore

1.4 SHELL

Write some kind of shell to be able to run the compiler and editor

1.5 EDITOR

Barebones code editor to be able to self-modify the SysyphOS code in
itself

2. THE KORE PROGRAMMING LANGUAGE

Somehow resembles lisp and uses s-expressions, but it is purely
procedural and as simple as it can be to ease implementation.

2.1 DATA TYPES

a:

- Word  (16 bits)
- Dword (32 bits)
- Byte (8 bits)
- Memory address (arch dependent)
- Inmediate string     "inmediate string"
- Inmediate word       10w
- Inmediate byte       10b
- Inmediate dword      10d
- Inmediate character  'c' (always byte)

2.2 COMPARISON OPERATORS

a:

- gt (Greather than)
- eq (Equal)
- lt (Less than)

2.3 ASSIGN

set

2.4 ARITHMETIC OPERATORS

a:

- add
- minus
- mul
- div

2.5 FLOW CONTROL

a:

- if
- while
- return

2.6 DECLARATIONS

a:

- function
- declare

2.7 EXAMPLE

 (program "Example"
    (function hello
        (print "Hello world"))
 
    (function hello-what what
        (print (add "Hello " what)))
 
    (declare word i)
    (declare address p)
 
    (set p (address i))
    (add 5w 10w 15w)
 
    (if (gt 5w 10w)
        (print "One")
        (print "Two"))
 
    (set i 0w)
    (while (lt iw 10w)
        (print "iteration")
        (set i (add 1w i)))
 
    (hello)
    (hello-what "what"))

3. KORE INTERPRETER, KORERUN.PY

Wip

4. KORE COMPILER

Wip

5. SYSYPHOS KERNEL

Wip

6. SYSYPHOS SHELL

Wip

7. SYSYPHOS EDITOR (SEED)

Wip

8. REFERENCES

These are small lisp interpreters, compilers and operating system
writing references that I find useful.

- `Step by step to MIPS assembly`
- `Lisp in less than 200 lines of C`

- `Step by step to MIPS assembly`:http://winfred-lu.blogspot.com/\
2010/06/step-by-step-to-mips-assembly.html
- `Lisp in less than 200 lines of C`:https://carld.github.io/\
2017/06/20/lisp-in-less-than-200-lines-of-c.html
- `Lispy`:http://norvig.com/lispy.html
